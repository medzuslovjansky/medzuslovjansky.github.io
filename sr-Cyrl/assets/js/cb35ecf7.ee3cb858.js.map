{"version":3,"file":"assets/js/cb35ecf7.ee3cb858.js","mappings":"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","sources":["webpack://interslavic-fun/./i18n/sr-Cyrl/docusaurus-plugin-content-docs/current/learn/grammar/syntax.md","webpack://interslavic-fun/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["\n\nexport const frontMatter = {\n\tsidebar_position: 8,\n\tlicense: 'republish',\n\tauthor: 'Jan van Steenbergen',\n\tlast_update: {\n\t\tauthor: 'Google Translate'\n\t},\n\torigin: 'http://steen.free.fr/interslavic/syntax.html'\n};\nexport const contentTitle = 'Синтакса';\nexport {default as metadata} from '@site/.docusaurus/docusaurus-plugin-content-docs/default/site-i-18-n-sr-cyrl-docusaurus-plugin-content-docs-current-learn-grammar-syntax-md-cb3.json'\nexport const assets = {\n\n};\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nexport const toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    h1: \"h1\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {CustomAfterSection, TransliteratorElement} = _components;\n  if (!CustomAfterSection) _missingMdxReference(\"CustomAfterSection\", true);\n  if (!TransliteratorElement) _missingMdxReference(\"TransliteratorElement\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.header, {\n      children: _jsx(_components.h1, {\n        id: \"синтакса\",\n        children: \"Синтакса\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Ред речи је у основи слободан, али преферирани (и стилски најнеутралнији) ред речи је субјекат – глагол – објекат (СВО). Није обавезно, али имајте на уму да стављање објекта испред субјекта неће помоћи да се разјасни значење. Ово није случај са реченицама у којима је или лична заменица или заменица \", _jsx(TransliteratorElement, {\n        children: \"kto\"\n      }), \" или субјекат или објекат, јер личне заменице и \", _jsx(TransliteratorElement, {\n        children: \"kto\"\n      }), \" имају своје облике акузатива, тако да је значење увек јасно.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Модификатори обично стоје испред именице. Ни ово није обавезно, али је најнеутралнији и најјаснији начин грађења реченице.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Постоје две врсте питања:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Питања да-не могу се поставити на три различита начина:\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"или се од нормалне декларативне реченице разликује само по интонацији:\", \"\\n\", _jsxs(_components.ul, {\n              children: [\"\\n\", _jsxs(_components.li, {\n                children: [_jsx(TransliteratorElement, {\n                  children: \"Otec kupil knigu?\"\n                }), \" „Да ли је отац купио књигу?”\"]\n              }), \"\\n\"]\n            }), \"\\n\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"или овој реченици претходи партикула \", _jsx(TransliteratorElement, {\n              children: \"či\"\n            }), \":\", \"\\n\", _jsxs(_components.ul, {\n              children: [\"\\n\", _jsx(_components.li, {\n                children: _jsx(TransliteratorElement, {\n                  children: \"Či otec kupil knigu?\"\n                })\n              }), \"\\n\"]\n            }), \"\\n\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"или је означена честицом питања \", _jsx(TransliteratorElement, {\n              children: \"li\"\n            }), \" која се налази одмах иза фокусне тачке питања, обично глагола:\", \"\\n\", _jsxs(_components.ul, {\n              children: [\"\\n\", _jsx(_components.li, {\n                children: _jsx(TransliteratorElement, {\n                  children: \"Kupil li otec knigu?\"\n                })\n              }), \"\\n\"]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Остала питања почињу упитном заменицом или прилогом, који се ставља на почетак реченице:\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(TransliteratorElement, {\n              children: \"Koju knigu kupil otec?\"\n            }), \" „Коју књигу је отац купио?“\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(TransliteratorElement, {\n              children: \"Kde otec kupil tu knigu?\"\n            }), \" „Где је отац купио ту књигу?“\\nУ овој врсти реченица, значење се обично објашњава падежом који се користи:\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(TransliteratorElement, {\n              children: \"Koja žena ljubi togo muža?\"\n            }), \" „Која жена воли тог човека?” (жена = субјект, мушкарац = објекат)\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(TransliteratorElement, {\n              children: \"Koju ženu ljubi toj muž?\"\n            }), \" „Коју жену воли тај мушкарац?“ (мушкарац = субјект, жена = објекат)\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Ако је потребно, могуће је користити пасивне реченице које су увек јасне:\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(TransliteratorElement, {\n              children: \"Koja žena jest ljubjena od togo muža?\"\n            }), \" „Коју жену воли тај мушкарац?“\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Завршне клаузуле се преводе помоћу \", _jsx(TransliteratorElement, {\n        children: \"že\"\n      }), \" или \", _jsx(TransliteratorElement, {\n        children: \"da\"\n      }), \" након чега следи условни:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(TransliteratorElement, {\n          children: \"Turisti posětet Niderlandiju, že by fotografovali tulipany.\"\n        }), \" „Туристи посећују Холандију да фотографишу лале.”\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(TransliteratorElement, {\n          children: \"Turisti posětili Niderlandiju, že by fotografovali tulipany.\"\n        }), \" „Туристи су посетили Холандију да фотографишу лале.”\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(TransliteratorElement, {\n          children: \"Ona prinosi jabloka, da by děti byli zdrave.\"\n        }), \" „Доноси јабуке да деца буду здрава.”\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(TransliteratorElement, {\n          children: \"Ona prinosila jabloka, da by děti byli zdrave.\"\n        }), \" „Донела је јабуке да деца буду здрава.”\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Пасивни глас се може користити, али ако јесте, то треба учинити опрезно. Реченица попут: \", _jsx(TransliteratorElement, {\n        children: \"Pica je dělana\"\n      }), \" или \", _jsx(TransliteratorElement, {\n        children: \"Pica je dělajema\"\n      }), \" „Пизза се прави” је граматички потпуно исправна. Ипак, боље се може избећи, јер оваква конструкција звучи неспретно оним Словенима који нису навикли да често користе глагол „бити“, посебно у садашњем времену. Осим тога, док је сасвим природно за део говорника словенског језика, за друге се пасивни прилог у прошлости уопште не може користити за конструкцију садашњег времена. Стога, ако је субјект познат, боље је користити нормалну активну реченицу. А ако субјекат није познат, као у случају наше пице, могуће је користити облик трећег лица множине без субјекта: \", _jsx(TransliteratorElement, {\n        children: \"Dělajut picu\"\n      }), \" „Они праве пицу, један прави пицу, пица се прави”. Још чешћа је рефлексивна конструкција: \", _jsx(TransliteratorElement, {\n        children: \"Pica dělaje se\"\n      }), \", што буквално значи „Пица се прави сама“ и треба да буде преведена као „Човек прави пицу, пица се прави“.\"]\n    }), \"\\n\", \"\\n\", _jsx(CustomAfterSection, {})]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n\n","/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["frontMatter","sidebar_position","license","author","last_update","origin","contentTitle","assets","toc","_createMdxContent","props","_components","h1","header","li","p","ul","components","CustomAfterSection","TransliteratorElement","_missingMdxReference","children","id","MDXContent","wrapper","MDXLayout","component","Error","emptyComponents","MDXContext","useMDXComponents","contextComponents","MDXProvider","properties","allComponents","disableParentContext","Provider","value"],"sourceRoot":""}